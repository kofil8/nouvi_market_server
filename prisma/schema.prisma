generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//enum//

enum UserRole {
  SUPER_ADMIN
  BUYER
  SELLER
  ADMIN
}

enum Gender {
  Male
  Female
  Other
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// MODEL//
model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  password         String?
  name             String?
  username         String?   @unique
  phoneNumber      String?
  profileImage     String?
  coverImage       String?
  address          String?
  gender           Gender?
  dateOfBirth      DateTime?
  stripeCustomerId String?   @unique

  isVerified Boolean @default(false)
  isOnline   Boolean @default(false)
  fcmToken   String?

  latitude  Float?
  longitude Float?

  status Status @default(ACTIVE)

  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Otp            Otp[]
  notifications  Notifications[] @relation("Notifications")
  message        Message[]       @relation("UserMessages")
  conversations1 Conversation[]  @relation("User1Conversations")
  conversations2 Conversation[]  @relation("User2Conversations")
  Conversation   Conversation[]

  @@map("users")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       Int
  hexCode   String?
  expiry    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId

  @@map("otps")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String   @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [receiverId], references: [id], name: "Notifications")

  @@map("notifications")
}

model Conversation {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  user1Id   String    @db.ObjectId
  user2Id   String    @db.ObjectId
  messages  Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  user1 User @relation("User1Conversations", fields: [user1Id], references: [id])
  user2 User @relation("User2Conversations", fields: [user2Id], references: [id])

  userId String? @db.ObjectId
  User   User?   @relation(fields: [userId], references: [id])

  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  content        String
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender       User         @relation("UserMessages", fields: [senderId], references: [id])
  conversation Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])

  @@map("messages")
}
